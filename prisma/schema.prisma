// https://pris.ly/d/prisma-schema
// https://github.com/remix-run/indie-stack/blob/main/prisma/schema.prisma
// https://github.com/planetscale/beam/blob/main/prisma/schema.prisma
// Visualize with https://prismaliser.app

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// https://www.prisma.io/docs/concepts/components/preview-features/client-preview-features
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "metrics", "views"]
}

// -----------------------------------------------------------------------------
// User
// -----------------------------------------------------------------------------

model User {
  id String @id @default(cuid())

  name     String
  username String  @unique(map: "User.username_unique")
  nick     String?

  email String? @unique(map: "User.email_unique") // TODO: Multiple emails
  phone String? @unique(map: "User.phone_unique") // TODO: Multiple phones

  role   UserRole? @relation(fields: [roleId], references: [id], onUpdate: Cascade)
  roleId String?

  tags     UserTag[]
  profiles UserProfile[]
  avatars  UserAvatarImage[]

  artists       Artist[]
  artistImages  ArtistImage[]
  artworks      Artwork[]
  artworkImages ArtworkImage[]
  exhibitions   Exhibition[]

  password UserPassword?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model UserRole {
  id String @id @default(cuid())

  symbol      String  @unique // "ADMIN"
  name        String  @unique // "Admin"
  sequence    Int?    @unique // 1 | 2 | 3 | ...
  description String? @db.Text // "Do something"

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPassword {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique

  hash String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserTag {
  id String @id @default(cuid())

  symbol      String  @unique // "COLLABORATOR"
  name        String  @unique // "Collaborator"
  sequence    Int?    @unique // 1 | 2 | 3 | ...
  description String? @db.Text // "Do something"

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  headline String?
  bio      String? @db.Text
  links    Json?

  modeName  String?  @default("Default")
  isPrimary Boolean? @default(true)
  sequence  Int?     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserAvatarImage {
  id String @id @default(cuid())

  url String @db.Text

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// -----------------------------------------------------------------------------
// Artwork
// -----------------------------------------------------------------------------

model Artwork {
  id String @id @default(cuid())

  title       String
  slug        String // @unique
  year        Int?
  medium      String // canvas, acrylic
  size        String // width, height, length
  price       Int?
  isPublished Boolean? @default(false)

  status   ArtworkStatus @relation(fields: [statusId], references: [id])
  statusId String

  images ArtworkImage[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId String?

  exhibition   Exhibition? @relation(fields: [exhibitionId], references: [id])
  exhibitionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([artistId])
  @@index([exhibitionId])
  @@index([statusId])
}

model ArtworkStatus {
  id String @id @default(cuid())

  symbol      String  @unique // "SOLD"
  name        String  @unique // "Sold"
  sequence    Int?    @unique // 1 | 2 | 3 | ...
  description String? @db.Text // "Sold to a buyer"

  artworks Artwork[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtworkImage {
  id String @id @default(cuid())

  url String @db.Text

  artwork   Artwork? @relation(fields: [artworkId], references: [id])
  artworkId String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([artworkId])
  @@index([userId])
}

model Artist {
  id String @id @default(cuid())

  name        String
  slug        String   @unique
  bio         String?  @db.Text
  isPublished Boolean? @default(false)

  image       ArtistImage?
  artworks    Artwork[]
  exhibitions Exhibition[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ArtistImage {
  id String @id @default(cuid())

  url String @db.Text

  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId String? @unique

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([artistId])
  @@index([userId])
}

model Exhibition {
  id String @id @default(cuid())

  edition     Int?
  title       String
  slug        String    @unique
  date        DateTime?
  description String?   @db.Text // or so called "write up"
  isPublished Boolean?  @default(false)

  images   ExhibitionImage[]
  artists  Artist[]
  artworks Artwork[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ExhibitionImage {
  id String @id @default(cuid())

  url String @db.Text

  exhibition   Exhibition? @relation(fields: [exhibitionId], references: [id])
  exhibitionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([exhibitionId])
}

model ContactMessage {
  id String @id @default(cuid())

  email       String
  name        String
  subject     String @db.Text
  description String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
